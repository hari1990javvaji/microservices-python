# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # workflow_dispatch:
  #   inputs:
  #     name:
  #       description: "Test"
  #       default: "Helm"

  #workflow_dispatch: 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  image-build-push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: docker-image-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository_owner == 'hari1990javvaji'
    env:
      IMAGE_NAME: webapp
      IMAGE_TAG: ${{ github.run_number }} # $GITHUB_RUN_NUMBER

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Git Checkout 
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{secrets.DOCKERHUB_USERNAME}}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

   
  deploy-staging:
    runs-on: ubuntu-latest
    needs: image-build-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository_owner == 'hari1990javvaji'
    name: Deploy-to-staging
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Image Name update
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.image.name = "${{secrets.DOCKERHUB_USERNAME}}/webapp"' -i ./helm/values.yaml
      - name: Docker username creds update
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.imageCredentials.username = "${{secrets.DOCKERHUB_USERNAME}}"' -i ./helm/values.yaml
      - name: Docker password creds update
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.imageCredentials.password = "${{secrets.DOCKERHUB_TOKEN}}"' -i ./helm/values.yaml
      - name: Image Tag update
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.image.tag = "${{ github.run_number }}"' -i ./helm/values.yaml
      - name: Generate manifest files
        uses: WyriHaximus/github-action-helm3@v3
        with:
          exec: helm template webapp ./helm --namespace=webappcheck --create-namespace --debug=true > ./helm/argodeployments/staging/deploy.yaml
      - name:  Apply image name changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Apply image name changes for version ${{ github.run_number }}
  notify_status:
    runs-on: ubuntu-latest
    steps:
    - name: Check Argo CD sync status
      run: |
        # Insert your script here to check the sync status from Argo CD
        # For example, you can use the Argo CD API to retrieve sync status
        # Replace the following line with your command
        echo "Checking sync status from Argo CD"
        ARGOCD_SERVER="http://a3473a7ebb8fd42b580af92e15d3da6a-375123251.us-east-1.elb.amazonaws.com"
        ARGOCD_APP_NAME="webappcheck" 
        RESPONSE=$(curl -s -k -L -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN}}" "${ARGOCD_SERVER}/api/v1/applications/${ARGOCD_APP_NAME}")
        echo "$RESPONSE"
        SYNC_STATUS=$(echo "$RESPONSE" | jq -r '.status.sync.status')

    - name: Notify status on GitHub
      if: ${{ always() }}
      run: |
        # Replace this line with a command to post the sync status as a comment on GitHub
        echo "Sync status of $ARGOCD_APP_NAME: $SYNC_STATUS" # Replace with your status information